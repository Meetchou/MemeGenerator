[{"/Users/mac/Documents/react/freeCodeCampReactCourse/meme-generator-project/src/index.js":"1","/Users/mac/Documents/react/freeCodeCampReactCourse/meme-generator-project/src/App.js":"2","/Users/mac/Documents/react/freeCodeCampReactCourse/meme-generator-project/src/components/Header.js":"3","/Users/mac/Documents/react/freeCodeCampReactCourse/meme-generator-project/src/components/Meme.js":"4"},{"size":254,"mtime":1653676124645,"results":"5","hashOfConfig":"6"},{"size":223,"mtime":1656343056340,"results":"7","hashOfConfig":"6"},{"size":368,"mtime":1656343010599,"results":"8","hashOfConfig":"6"},{"size":1562,"mtime":1653946625565,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"tri3yf",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/mac/Documents/react/freeCodeCampReactCourse/meme-generator-project/src/index.js",[],[],"/Users/mac/Documents/react/freeCodeCampReactCourse/meme-generator-project/src/App.js",[],[],"/Users/mac/Documents/react/freeCodeCampReactCourse/meme-generator-project/src/components/Header.js",["25"],[],"import React from \"react\"\n\nexport default function Header() {\n\treturn (\n\t\t<header className=\"header\">\n            <img \n                src=\"./images/troll-face.png\" \n                className=\"header--image\"\n            />\n            <h2 className=\"header--title\">MemeInator</h2>\n            <h4 className=\"header--project\">Meme Generator</h4>\n        </header>\n\t)\n}",[],"/Users/mac/Documents/react/freeCodeCampReactCourse/meme-generator-project/src/components/Meme.js",["26"],[],"import React from \"react\"\n\nexport default function Meme()\n{ \n\tconst [meme, setMeme] = React.useState({\n\t\ttopText: \"\",\n\t\tbottomText: \"\",\n\t\trandomImage: \"\",\n\t})\n\n\tconst [allMeme, setAllMeme] = React.useState([])\n\n\tReact.useEffect(() => {\n\t\tasync function getMemes() {\n\t\t\tconst res = await fetch(\"https://api.imgflip.com/get_memes\")\n       \t\tconst data = await res.json()\n        \tsetAllMeme(data.data.memes)\n\t\t}\n\t\tgetMemes()\n\t}, [])\n\n\tfunction handleChangeText(event)\n\t{\n\t\tsetMeme(prevMeme => ({\n\t\t\t...prevMeme,\n\t\t\t[event.target.name]: event.target.value\n\t\t}))\n\t}\n\n\tfunction getMemeImage() {\n\t\tconst memesArray = allMeme;\n\t\tconst randomNumber = Math.floor(Math.random() * memesArray.length);\n\t\tsetMeme(prevMeme => ({\n\t\t\t...prevMeme,\n\t\t\trandomImage: memesArray[randomNumber].url\n\t\t}))\n\t}\n\n\treturn (\n\t\t<main>\n\t\t\t<div className=\"form\">\n\t\t\t\t<input \n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tplaceholder=\"Top text\"\n\t\t\t\t\tclassName=\"form--input\"\n\t\t\t\t\tname=\"topText\"\n\t\t\t\t\tvalue={meme.topText}\n\t\t\t\t\tonChange={handleChangeText}\n\t\t\t\t\t/>\n\t\t\t\t<input \n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tplaceholder=\"Bottom text\"\n\t\t\t\t\tclassName=\"form--input\"\n\t\t\t\t\tname=\"bottomText\"\n\t\t\t\t\tvalue={meme.bottomText}\n\t\t\t\t\tonChange={handleChangeText}\n\t\t\t\t\t/>\n\t\t\t\t<button onClick={getMemeImage} className=\"form--button\">Get a new meme image ðŸ–¼</button>\n\t\t\t</div>\n\t\t\t<div className=\"meme\">\n                <img src={meme.randomImage} className=\"meme--image\" />\n                <h2 className=\"meme--text top\">{meme.topText}</h2>\n                <h2 className=\"meme--text bottom\">{meme.bottomText}</h2>\n            </div>\n\n\t\t</main>\n\t)\n}",{"ruleId":"27","severity":1,"message":"28","line":6,"column":13,"nodeType":"29","endLine":9,"endColumn":15},{"ruleId":"27","severity":1,"message":"28","line":61,"column":17,"nodeType":"29","endLine":61,"endColumn":71},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]